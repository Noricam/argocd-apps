apiVersion: v1
kind: Namespace
metadata:
  name: test-app
  # AJOUT: On applique directement la politique de sécurité permissive au namespace.
  # C'est plus propre que de patcher le namespace "default".
  labels:
    pod-security.kubernetes.io/enforce: privileged

---
# --- Base de Données (PostgreSQL) ---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: test-app
type: Opaque
stringData:
  POSTGRES_USER: "user"
  POSTGRES_PASSWORD: "password"

---
# ConfigMap pour le script d'initialisation de la base de données
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: test-app
  name: postgres-init-script
data:
  init.sql: |
    CREATE TABLE IF NOT EXISTS items (
        id SERIAL PRIMARY KEY,
        name VARCHAR(50) NOT NULL
    );
    -- Vider la table avant d'insérer pour éviter les doublons lors des redémarrages
    TRUNCATE TABLE items;
    INSERT INTO items (name) VALUES ('Item Alpha'), ('Item Bravo'), ('Item Charlie');

---
# Service pour exposer la base de données à l'intérieur du cluster
apiVersion: v1
kind: Service
metadata:
  namespace: test-app
  name: postgres-db-service
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---
# Déploiement de la base de données PostgreSQL
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: test-app
  name: postgres-statefulset
spec:
  serviceName: "postgres-db-service"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      containers:
        - name: postgres
          image: postgres:13-alpine
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: "testdb"
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: init-script
          configMap:
            name: postgres-init-script
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
      namespace: test-app
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: local-path
      resources:
        requests:
          storage: 1Gi

---
# --- API (Backend) ---

# Service pour exposer l'API à l'intérieur du cluster
apiVersion: v1
kind: Service
metadata:
  name: api-service
  namespace: test-app
spec:
  selector:
    app: api
  ports:
    - protocol: TCP
      port: 5001
      targetPort: 5001

---
# Déploiement de l'API
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  namespace: test-app
spec:
  replicas: 1 # Vous pouvez augmenter ce nombre pour la haute disponibilité
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
        - name: api
          image: noaduchiron/test-app-api:1.0
          ports:
            - containerPort: 5001
          env:
            - name: DB_HOST
              value: "postgres-db-service" # Nom du service de la BDD
            - name: POSTGRES_DB
              value: "testdb"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD

---
# --- Frontend ---

# Service pour exposer le frontend (qui sera accessible via un Ingress)
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: test-app
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80        # Port du service
      targetPort: 80  # Port du conteneur Nginx

---
# Déploiement du Frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: test-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: noaduchiron/test-app-frontend:1.0
          ports:
            - containerPort: 80

---
# Ingress pour exposer le frontend à l'extérieur du cluster
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frontend-ingress
  namespace: test-app
spec:
  ingressClassName: private
  rules:
    - host: test-app.nori
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend-service
                port:
                  number: 80